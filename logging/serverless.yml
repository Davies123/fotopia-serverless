service: fotopia-web-app-honeycomb

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: go1.x
  region: us-east-1
  environment:
    Environment: ${opt:stage, self:provider.stage}
    HoneycombWriteKey: ${file(./serverless.env.yml):HONEY_KEY}
    HoneycombAPIHost: https://api.honeycomb.io
    HoneycombDataset: dataset-aws-cloudfront
    HoneycombSampleRate: 1
    LogGroupName: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-create
    LogGroupName1: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-thumbs
    LogGroupName2: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-get
    LogGroupName3: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-indexes
    LogGroupName4: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-query
    LogGroupName5: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-stream
    LogGroupName6: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-faces
    LogGroupName7: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-update
    LogGroupName8: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-config
    LogGroupName9: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-person
    LogGroupName10: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-people
    LogGroupName11: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-delete
    LogGroupName12: ${file(./serverless.env.yml):LOG_GROUP_PREFIX}${opt:stage, self:provider.stage}-peopleThumbs
    FilterPattern: ''
resources:
  Resources:
    CloudwatchLambdaHandler:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          S3Bucket: honeycomb-builds
          S3Key: honeycombio/integrations-for-aws/LATEST/ingest-handlers.zip
        Description: Lambda function for sending cloudwatch logs to Honeycomb
        Environment:
          Variables:
            ENVIRONMENT: ${self:provider.environment.Environment}
            PARSER_TYPE: json
            HONEYCOMB_WRITE_KEY: ${self:provider.environment.HoneycombWriteKey}
            API_HOST: ${self:provider.environment.HoneycombAPIHost}
            DATASET: ${self:provider.environment.HoneycombDataset}
            SAMPLE_RATE: ${self:provider.environment.HoneycombSampleRate}
        FunctionName: CloudwatchLambdaHandler-${self:service}
        Handler: cloudwatch-handler
        MemorySize: 128
        Role:
          "Fn::GetAtt":
            - LambdaIAMRole
            - Arn
        Runtime: go1.x
        Timeout: 10
    ExecutePermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        Principal: 'logs.amazonaws.com'
    CloudwatchSubscriptionFilter:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    # hacky work-around to allow multiple optional inputs for log group name
    # clearly hitting some limitations of the Cloudformation workflow here
    CloudwatchSubscriptionFilter1:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName1}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter2:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName2}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter3:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName3}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter4:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName4}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter5:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName5}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter6:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName6}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter7:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName7}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter8:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName8}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter9:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName9}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter10:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName10}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter11:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName11}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    CloudwatchSubscriptionFilter12:
      Type: "AWS::Logs::SubscriptionFilter"
      Properties:
        DestinationArn:
          "Fn::GetAtt":
            - CloudwatchLambdaHandler
            - Arn
        LogGroupName: ${self:provider.environment.LogGroupName12}
        FilterPattern: ${self:provider.environment.FilterPattern}
      DependsOn: ExecutePermission
    LambdaIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
    LambdaLogPolicy:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyName: "lambda-create-log"
        Roles:
            - Ref: LambdaIAMRole
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: 'arn:aws:logs:*:*:*'
