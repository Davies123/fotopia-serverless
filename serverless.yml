service: fotopia-web-app

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-stack-output
  - serverless-domain-manager
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-s3-sync
  - serverless-s3-local
  - serverless-offline
  - serverless-s3-local-sync
  - serverless-s3-remover

custom:
  webpackIncludeModules: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  output:
    file: output/${self:provider.environment.S3_OUTPUT_FILENAME}
  s3:
    host: 0.0.0.0
    port: 5000
    directory: /tmp/s3bucket
    location: ./.webpack/service
    cors: ./cors-policy.xml
  s3Sync:
    - bucketName: ${self:provider.environment.S3_OUTPUT_BUCKET}
      localDir: output
  remover:
     buckets:
       - ${self:provider.environment.S3_OUTPUT_BUCKET}
       - ${self:provider.environment.S3_BUCKET}
  customDomain:
    domainName: ${self:provider.environment.CUSTOM_DOMAIN}
    basePath: ''
    stage: ${opt:stage, self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    S3_BUCKET: ${self:service}-${opt:stage, self:provider.stage}
    S3_OUTPUT_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-output
    S3_OUTPUT_FILENAME: config.json
    LAMBDA_PREFIX: ${self:service}-${opt:stage, self:provider.stage}-
    USER_POOL_NAME: ${self:service}-${opt:stage, self:provider.stage}-user-pool
    USER_POOL_APP_CLIENT: ${self:service}-${opt:stage, self:provider.stage}-user-pool-client
    IDENTITY_POOL: fotopia ${opt:stage, self:provider.stage} identity pool
    COGNITO_AUTHORIZED_ROLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-auth-role-name
    COGNITO_AUTHORIZED_POLICY: ${self:service}-${opt:stage, self:provider.stage}-auth-policy
    COGNITO_AUTHORIZED_S3_POLICY: ${self:service}-${opt:stage, self:provider.stage}-auth-s3-policy
    COGNITO_AUTHORIZED_API_POLICY: ${self:service}-${opt:stage, self:provider.stage}-auth-api-policy
    COGNITO_UNAUTHORIZED_ROLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-unauth-role-name
    CUSTOM_DOMAIN: ${file(./serverless.env.yml):${opt:stage, self:provider.stage}.CUSTOM_DOMAIN}
    FOTOPIA_GROUP: ${file(./serverless.env.yml):FOTOPIA_GROUP}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource:
        - "*"
        - "arn:aws:lambda:*:*:*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - logs:DescribeLogStreams
      Resource:
        - "arn:aws:logs:*:*:*"
    - Effect: "Allow"
      Action:
        - "s3:DeleteObject"
      Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource: "arn:aws:s3:::${self:provider.environment.S3_OUTPUT_BUCKET}/*"

functions:
  create:
    handler: fotos/create.createItem
    events:
      - http:
          path: create
          method: post
          cors: true
          authorizer: aws_iam

  query:
    handler: fotos/query.queryItems
    events:
      - http:
          path: query
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: fotos/get.getItem
    events:
      - http:
          path: foto/{username}/{id}
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: fotos/update.updateItem
    events:
      - http:
          path: foto/{username}/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: fotos/delete.deleteItem
    events:
      - http:
          path: foto/{username}/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  config:
    handler: fotos/config.getItem
    events:
      - http:
          path: foto/config
          method: get
          cors: true
  thumbnails:
    handler: fotos/thumbs.createThumb
    events:
      - s3:
          bucket: fotos
          event: s3:ObjectCreated:*
  stream:
    handler: fotos/stream.indexRecords
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - FotopiaDynamoDbTable
              - StreamArn
              # https://github.com/boazdejong/serverless-graphql-api/blob/master/serverless.yml
resources:
  Resources:
    FotopiaDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: birthtime
            AttributeType: N
          - AttributeName: group
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        LocalSecondaryIndexes:
          -
            IndexName: "UsernameBirthtimeIndex"
            KeySchema:
              -
                AttributeName: "username"
                KeyType: "HASH"
              -
                AttributeName: "birthtime"
                KeyType: "RANGE"
            Projection:
              NonKeyAttributes:
                - "id"
              ProjectionType: "INCLUDE"
        GlobalSecondaryIndexes:
          -
            IndexName: "GroupBirthtimeIndex"
            KeySchema:
              -
                AttributeName: "group"
                KeyType: "HASH"
              -
                AttributeName: "birthtime"
                KeyType: "RANGE"
            Projection:
              NonKeyAttributes:
                - "id"
                - "username"
                - "people"
                - "tags"
                - "img_key"
                - "meta"
                - "userIdentityId"
              ProjectionType: "INCLUDE"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    S3BucketFotos:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - "*"
    ThumbnailsLambdaPermissionFotosS3:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - ThumbnailsLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}"
    FotopiaOutput:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:provider.environment.S3_OUTPUT_BUCKET}
        AccessControl: PublicRead
    FotopiaPublicPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: ${self:provider.environment.S3_BUCKET}
        PolicyDocument:
          Statement:
          - Principal: "*"
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
    FotopiaOutputBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: ${self:provider.environment.S3_OUTPUT_BUCKET}
        PolicyDocument:
          Statement:
          - Principal: "*"
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: "arn:aws:s3:::${self:provider.environment.S3_OUTPUT_BUCKET}/*"
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:provider.environment.USER_POOL_NAME}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        AutoVerifiedAttributes:
          - email
        AliasAttributes:
          - email
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.environment.USER_POOL_APP_CLIENT}
        RefreshTokenValidity: 30
        ExplicitAuthFlows: [ADMIN_NO_SRP_AUTH]
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool
    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${self:provider.environment.IDENTITY_POOL}
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolClient
            ProviderName:
              Fn::GetAtt: [ UserPool, ProviderName ]
    CognitoUnauthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${self:provider.environment.COGNITO_UNAUTHORIZED_ROLE_NAME}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"
    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${self:provider.environment.COGNITO_AUTHORIZED_ROLE_NAME}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
        Policies:
          - PolicyName: ${self:provider.environment.COGNITO_AUTHORIZED_POLICY}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
          - PolicyName: ${self:provider.environment.COGNITO_AUTHORIZED_S3_POLICY}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "s3:*"
                  Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
          - PolicyName: ${self:provider.environment.COGNITO_AUTHORIZED_API_POLICY}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "arn:aws:execute-api:${self:provider.region}:*:*/*"
    IdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [ CognitoAuthorizedRole, Arn ]
          unauthenticated:
            Fn::GetAtt: [ CognitoUnauthorizedRole, Arn ]
  Outputs:
    UserPoolId:
      Value:
        Ref: UserPool
      Export:
        Name: "UserPool::Id-${opt:stage, self:provider.stage}"
    UserPoolClientId:
      Value:
        Ref: UserPoolClient
      Export:
        Name: "UserPoolClient::Id-${opt:stage, self:provider.stage}"
    IdentityPoolId:
      Value:
        Ref: IdentityPool
      Export:
        Name: "IdentityPool::Id-${opt:stage, self:provider.stage}"
    CognitoAuthorizedRoleArn:
      Value:
        Fn::GetAtt: [ CognitoAuthorizedRole, Arn ]
      Export:
        Name: "CognitoAuthorizedRole::Arn-${opt:stage, self:provider.stage}"
    CognitoUnauthorizedRoleArn:
      Value:
        Fn::GetAtt: [ CognitoUnauthorizedRole, Arn ]
      Export:
        Name: "CognitoUnauthorizedRole::Arn-${opt:stage, self:provider.stage}"
    Region:
      Value: ${self:provider.region}
    Bucket:
      Value: ${self:provider.environment.S3_BUCKET}

package:
  exclude:
    - node_modules/**
    - '!node_modules/joi/**'
    - '!node_modules/uuid/**'
    - '!node_modules/babel-runtime/**'
    - '!node_modules/sharp/**'
